// SPDX-License-Identifier: MIT
pragma solidity >=0.5.11 <0.9.0;


import "./ERC721.sol";
import "./extensions/ERC721Enumerable.sol";
import "./extensions/ERC721Burnable.sol";
import "./extensions/ERC721Pausable.sol";
import "../access/AccessControlEnumerable.sol";

import "../gsn/Context.sol";
import "../utils/Counters.sol";


contract ERC721Full is Context, AccessControlEnumerable, ERC721Enumerable, ERC721Burnable, ERC721Pausable {
    using Counters for Counters.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    Counters.Counter internal _tokenIdTracker;

    string private _baseTokenURI;

    constructor(string memory name_, string memory symbol_, string memory baseTokenURI_)
    ERC721(name_, symbol_) {
        _baseTokenURI = baseTokenURI_;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    modifier onlyPauser(){
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721 Full: Pauser Role Required.");
        _;
    }

    modifier onlyMinter(){
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721 Full: Minter Role Required");
        _;

    }

    function _baseURI() internal view virtual override returns(string memory){
        return _baseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
     function mint(address _to) public onlyMinter virtual {
         _mint(_to, _tokenIdTracker.current());
         _tokenIdTracker.increment();
     }

      /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
     function pause() public onlyPauser virtual {
         _pause();
     }

     /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
     function unpause() public onlyPauser {
         _unpause();
     }

/**
     * @dev Prefixes token transfers.
     *
     * See {ERC721}
     *
     * Requirements:
     *
     * - optional logic embedded before a transfer
     */
    function _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(_from, _to, _tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {
         return super.supportsInterface(interfaceId);
     }



}